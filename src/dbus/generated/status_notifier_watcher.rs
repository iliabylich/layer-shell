// This code was autogenerated with `dbus-codegen-rust --crossroads -o src/dbus/generated/status_notifier_watcher.rs`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus_crossroads as crossroads;

pub trait OrgKdeStatusNotifierWatcher {
    fn register_status_notifier_item(&mut self, service: String) -> Result<(), dbus::MethodErr>;
    fn register_status_notifier_host(&mut self, service: String) -> Result<(), dbus::MethodErr>;
    fn registered_status_notifier_items(&self) -> Result<Vec<String>, dbus::MethodErr>;
    fn is_status_notifier_host_registered(&self) -> Result<bool, dbus::MethodErr>;
    fn protocol_version(&self) -> Result<i32, dbus::MethodErr>;
}

#[derive(Debug)]
pub struct OrgKdeStatusNotifierWatcherStatusNotifierItemRegistered {
    pub service: String,
}

impl arg::AppendAll for OrgKdeStatusNotifierWatcherStatusNotifierItemRegistered {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.service, i);
    }
}

impl arg::ReadAll for OrgKdeStatusNotifierWatcherStatusNotifierItemRegistered {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeStatusNotifierWatcherStatusNotifierItemRegistered {
            service: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeStatusNotifierWatcherStatusNotifierItemRegistered {
    const NAME: &'static str = "StatusNotifierItemRegistered";
    const INTERFACE: &'static str = "org.kde.StatusNotifierWatcher";
}

#[derive(Debug)]
pub struct OrgKdeStatusNotifierWatcherStatusNotifierItemUnregistered {
    pub service: String,
}

impl arg::AppendAll for OrgKdeStatusNotifierWatcherStatusNotifierItemUnregistered {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.service, i);
    }
}

impl arg::ReadAll for OrgKdeStatusNotifierWatcherStatusNotifierItemUnregistered {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeStatusNotifierWatcherStatusNotifierItemUnregistered {
            service: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeStatusNotifierWatcherStatusNotifierItemUnregistered {
    const NAME: &'static str = "StatusNotifierItemUnregistered";
    const INTERFACE: &'static str = "org.kde.StatusNotifierWatcher";
}

#[derive(Debug)]
pub struct OrgKdeStatusNotifierWatcherStatusNotifierHostRegistered {
}

impl arg::AppendAll for OrgKdeStatusNotifierWatcherStatusNotifierHostRegistered {
    fn append(&self, _: &mut arg::IterAppend) {
    }
}

impl arg::ReadAll for OrgKdeStatusNotifierWatcherStatusNotifierHostRegistered {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeStatusNotifierWatcherStatusNotifierHostRegistered {
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeStatusNotifierWatcherStatusNotifierHostRegistered {
    const NAME: &'static str = "StatusNotifierHostRegistered";
    const INTERFACE: &'static str = "org.kde.StatusNotifierWatcher";
}

pub fn register_org_kde_status_notifier_watcher<T>(cr: &mut crossroads::Crossroads) -> crossroads::IfaceToken<T>
where T: OrgKdeStatusNotifierWatcher + Send + 'static
{
    cr.register("org.kde.StatusNotifierWatcher", |b| {
        b.signal::<(String,), _>("StatusNotifierItemRegistered", ("service",));
        b.signal::<(String,), _>("StatusNotifierItemUnregistered", ("service",));
        b.signal::<(), _>("StatusNotifierHostRegistered", ());
        b.method("RegisterStatusNotifierItem", ("service",), (), |_, t: &mut T, (service,)| {
            t.register_status_notifier_item(service,)
        });
        b.method("RegisterStatusNotifierHost", ("service",), (), |_, t: &mut T, (service,)| {
            t.register_status_notifier_host(service,)
        });
        b.property::<Vec<String>, _>("RegisteredStatusNotifierItems")
            .get(|_, t: &mut T| t.registered_status_notifier_items());
        b.property::<bool, _>("IsStatusNotifierHostRegistered")
            .get(|_, t: &mut T| t.is_status_notifier_host_registered());
        b.property::<i32, _>("ProtocolVersion")
            .get(|_, t: &mut T| t.protocol_version());
    })
}
