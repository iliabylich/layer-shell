// This code was autogenerated with `dbus-codegen-rust --client blocking -o src/dbus/generated/pipewire_dbus.rs`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait OrgLocalPipewireDBus {
    fn data(&self) -> Result<(u32, bool,), dbus::Error>;
}

#[derive(Debug)]
pub struct OrgLocalPipewireDBusDataChanged {
    pub volume: u32,
    pub muted: bool,
}

impl arg::AppendAll for OrgLocalPipewireDBusDataChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.volume, i);
        arg::RefArg::append(&self.muted, i);
    }
}

impl arg::ReadAll for OrgLocalPipewireDBusDataChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgLocalPipewireDBusDataChanged {
            volume: i.read()?,
            muted: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgLocalPipewireDBusDataChanged {
    const NAME: &'static str = "DataChanged";
    const INTERFACE: &'static str = "org.local.PipewireDBus";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgLocalPipewireDBus for blocking::Proxy<'a, C> {

    fn data(&self) -> Result<(u32, bool,), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(self, "org.local.PipewireDBus", "Data")
    }
}
