// This code was autogenerated with `dbus-codegen-rust --client blocking -o src/dbus/gen/dbus_menu.rs`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub(crate) trait ComCanonicalDbusmenu {
    fn get_layout(&self, parent_id: i32, recursion_depth: i32, property_names: Vec<&str>) -> Result<(u32, (i32, arg::PropMap, Vec<arg::Variant<Box<dyn arg::RefArg + 'static>>>,)), dbus::Error>;
    fn get_group_properties(&self, ids: Vec<i32>, property_names: Vec<&str>) -> Result<Vec<(i32, arg::PropMap,)>, dbus::Error>;
    fn get_property(&self, id: i32, name: &str) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error>;
    fn event(&self, id: i32, event_id: &str, data: arg::Variant<Box<dyn arg::RefArg>>, timestamp: u32) -> Result<(), dbus::Error>;
    fn event_group(&self, events: Vec<(i32, &str, arg::Variant<Box<dyn arg::RefArg>>, u32,)>) -> Result<Vec<i32>, dbus::Error>;
    fn about_to_show(&self, id: i32) -> Result<bool, dbus::Error>;
    fn about_to_show_group(&self, ids: Vec<i32>) -> Result<(Vec<i32>, Vec<i32>), dbus::Error>;
    fn version(&self) -> Result<u32, dbus::Error>;
    fn text_direction(&self) -> Result<String, dbus::Error>;
    fn status(&self) -> Result<String, dbus::Error>;
    fn icon_theme_path(&self) -> Result<Vec<String>, dbus::Error>;
}

#[derive(Debug)]
pub(crate) struct ComCanonicalDbusmenuItemsPropertiesUpdated {
    pub(crate) updated_props: Vec<(i32, arg::PropMap,)>,
    pub(crate) removed_props: Vec<(i32, Vec<String>,)>,
}

impl arg::AppendAll for ComCanonicalDbusmenuItemsPropertiesUpdated {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.updated_props, i);
        arg::RefArg::append(&self.removed_props, i);
    }
}

impl arg::ReadAll for ComCanonicalDbusmenuItemsPropertiesUpdated {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(ComCanonicalDbusmenuItemsPropertiesUpdated {
            updated_props: i.read()?,
            removed_props: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for ComCanonicalDbusmenuItemsPropertiesUpdated {
    const NAME: &'static str = "ItemsPropertiesUpdated";
    const INTERFACE: &'static str = "com.canonical.dbusmenu";
}

#[derive(Debug)]
pub(crate) struct ComCanonicalDbusmenuLayoutUpdated {
    pub(crate) revision: u32,
    pub(crate) parent: i32,
}

impl arg::AppendAll for ComCanonicalDbusmenuLayoutUpdated {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.revision, i);
        arg::RefArg::append(&self.parent, i);
    }
}

impl arg::ReadAll for ComCanonicalDbusmenuLayoutUpdated {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(ComCanonicalDbusmenuLayoutUpdated {
            revision: i.read()?,
            parent: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for ComCanonicalDbusmenuLayoutUpdated {
    const NAME: &'static str = "LayoutUpdated";
    const INTERFACE: &'static str = "com.canonical.dbusmenu";
}

#[derive(Debug)]
pub(crate) struct ComCanonicalDbusmenuItemActivationRequested {
    pub(crate) id: i32,
    pub(crate) timestamp: u32,
}

impl arg::AppendAll for ComCanonicalDbusmenuItemActivationRequested {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.id, i);
        arg::RefArg::append(&self.timestamp, i);
    }
}

impl arg::ReadAll for ComCanonicalDbusmenuItemActivationRequested {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(ComCanonicalDbusmenuItemActivationRequested {
            id: i.read()?,
            timestamp: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for ComCanonicalDbusmenuItemActivationRequested {
    const NAME: &'static str = "ItemActivationRequested";
    const INTERFACE: &'static str = "com.canonical.dbusmenu";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> ComCanonicalDbusmenu for blocking::Proxy<'a, C> {

    fn get_layout(&self, parent_id: i32, recursion_depth: i32, property_names: Vec<&str>) -> Result<(u32, (i32, arg::PropMap, Vec<arg::Variant<Box<dyn arg::RefArg + 'static>>>,)), dbus::Error> {
        self.method_call("com.canonical.dbusmenu", "GetLayout", (parent_id, recursion_depth, property_names, ))
    }

    fn get_group_properties(&self, ids: Vec<i32>, property_names: Vec<&str>) -> Result<Vec<(i32, arg::PropMap,)>, dbus::Error> {
        self.method_call("com.canonical.dbusmenu", "GetGroupProperties", (ids, property_names, ))
            .and_then(|r: (Vec<(i32, arg::PropMap,)>, )| Ok(r.0, ))
    }

    fn get_property(&self, id: i32, name: &str) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error> {
        self.method_call("com.canonical.dbusmenu", "GetProperty", (id, name, ))
            .and_then(|r: (arg::Variant<Box<dyn arg::RefArg + 'static>>, )| Ok(r.0, ))
    }

    fn event(&self, id: i32, event_id: &str, data: arg::Variant<Box<dyn arg::RefArg>>, timestamp: u32) -> Result<(), dbus::Error> {
        self.method_call("com.canonical.dbusmenu", "Event", (id, event_id, data, timestamp, ))
    }

    fn event_group(&self, events: Vec<(i32, &str, arg::Variant<Box<dyn arg::RefArg>>, u32,)>) -> Result<Vec<i32>, dbus::Error> {
        self.method_call("com.canonical.dbusmenu", "EventGroup", (events, ))
            .and_then(|r: (Vec<i32>, )| Ok(r.0, ))
    }

    fn about_to_show(&self, id: i32) -> Result<bool, dbus::Error> {
        self.method_call("com.canonical.dbusmenu", "AboutToShow", (id, ))
            .and_then(|r: (bool, )| Ok(r.0, ))
    }

    fn about_to_show_group(&self, ids: Vec<i32>) -> Result<(Vec<i32>, Vec<i32>), dbus::Error> {
        self.method_call("com.canonical.dbusmenu", "AboutToShowGroup", (ids, ))
    }

    fn version(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(self, "com.canonical.dbusmenu", "Version")
    }

    fn text_direction(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(self, "com.canonical.dbusmenu", "TextDirection")
    }

    fn status(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(self, "com.canonical.dbusmenu", "Status")
    }

    fn icon_theme_path(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(self, "com.canonical.dbusmenu", "IconThemePath")
    }
}
