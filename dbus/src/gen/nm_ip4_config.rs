// This code was autogenerated with `dbus-codegen-rust --client nonblock -o dbus/src/gen/nm_ip4_config.rs`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::nonblock;

pub trait OrgFreedesktopNetworkManagerIP4Config {
    fn addresses(&self) -> nonblock::MethodReply<Vec<Vec<u32>>>;
    fn address_data(&self) -> nonblock::MethodReply<Vec<arg::PropMap>>;
    fn gateway(&self) -> nonblock::MethodReply<String>;
    fn routes(&self) -> nonblock::MethodReply<Vec<Vec<u32>>>;
    fn route_data(&self) -> nonblock::MethodReply<Vec<arg::PropMap>>;
    fn nameservers(&self) -> nonblock::MethodReply<Vec<u32>>;
    fn nameserver_data(&self) -> nonblock::MethodReply<Vec<arg::PropMap>>;
    fn domains(&self) -> nonblock::MethodReply<Vec<String>>;
    fn searches(&self) -> nonblock::MethodReply<Vec<String>>;
    fn dns_options(&self) -> nonblock::MethodReply<Vec<String>>;
    fn dns_priority(&self) -> nonblock::MethodReply<i32>;
    fn wins_servers(&self) -> nonblock::MethodReply<Vec<u32>>;
    fn wins_server_data(&self) -> nonblock::MethodReply<Vec<String>>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target=T>> OrgFreedesktopNetworkManagerIP4Config for nonblock::Proxy<'a, C> {

    fn addresses(&self) -> nonblock::MethodReply<Vec<Vec<u32>>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(self, "org.freedesktop.NetworkManager.IP4Config", "Addresses")
    }

    fn address_data(&self) -> nonblock::MethodReply<Vec<arg::PropMap>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(self, "org.freedesktop.NetworkManager.IP4Config", "AddressData")
    }

    fn gateway(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(self, "org.freedesktop.NetworkManager.IP4Config", "Gateway")
    }

    fn routes(&self) -> nonblock::MethodReply<Vec<Vec<u32>>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(self, "org.freedesktop.NetworkManager.IP4Config", "Routes")
    }

    fn route_data(&self) -> nonblock::MethodReply<Vec<arg::PropMap>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(self, "org.freedesktop.NetworkManager.IP4Config", "RouteData")
    }

    fn nameservers(&self) -> nonblock::MethodReply<Vec<u32>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(self, "org.freedesktop.NetworkManager.IP4Config", "Nameservers")
    }

    fn nameserver_data(&self) -> nonblock::MethodReply<Vec<arg::PropMap>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(self, "org.freedesktop.NetworkManager.IP4Config", "NameserverData")
    }

    fn domains(&self) -> nonblock::MethodReply<Vec<String>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(self, "org.freedesktop.NetworkManager.IP4Config", "Domains")
    }

    fn searches(&self) -> nonblock::MethodReply<Vec<String>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(self, "org.freedesktop.NetworkManager.IP4Config", "Searches")
    }

    fn dns_options(&self) -> nonblock::MethodReply<Vec<String>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(self, "org.freedesktop.NetworkManager.IP4Config", "DnsOptions")
    }

    fn dns_priority(&self) -> nonblock::MethodReply<i32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(self, "org.freedesktop.NetworkManager.IP4Config", "DnsPriority")
    }

    fn wins_servers(&self) -> nonblock::MethodReply<Vec<u32>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(self, "org.freedesktop.NetworkManager.IP4Config", "WinsServers")
    }

    fn wins_server_data(&self) -> nonblock::MethodReply<Vec<String>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(self, "org.freedesktop.NetworkManager.IP4Config", "WinsServerData")
    }
}
